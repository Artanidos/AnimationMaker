#!/bin/bash
#################
# Launcher init #
#################

needs_update=true

. ~/.last_revision 2>/dev/null || true
if [ "$SNAP_DESKTOP_LAST_REVISION" = "$SNAP_REVISION" ]; then
  needs_update=false
fi
[ $needs_update = true ] && echo "SNAP_DESKTOP_LAST_REVISION=$SNAP_REVISION" > ~/.last_revision

if [ "$SNAP_ARCH" == "amd64" ]; then
  ARCH="x86_64-linux-gnu"
elif [ "$SNAP_ARCH" == "armhf" ]; then
  ARCH="arm-linux-gnueabihf"
elif [ "$SNAP_ARCH" == "arm64" ]; then
  ARCH="aarch64-linux-gnu"
else
  ARCH="$SNAP_ARCH-linux-gnu"
fi

export SNAP_LAUNCHER_ARCH_TRIPLET=$ARCH

#########################################
# Ubuntu App platform runtime selection #
#########################################

if [ -d $SNAP/ubuntu-app-platform ]; then
  RUNTIME=$SNAP/ubuntu-app-platform
  if [ ! -d $RUNTIME/usr ] ; then
    echo "You need to connect this snap to the ubuntu app platform snap."
    echo ""
    echo "You can do this with those commands:"
    echo "snap install ubuntu-app-platform"
    echo "snap connect $SNAP_NAME:platform ubuntu-app-platform:platform"
    exit 1
  fi
  export QT_SELECT=snappy-qt5-app-platform
fi

###############################################
# Launcher common exports for any desktop app #
###############################################

WITH_RUNTIME=no
if [ -z "$RUNTIME" ]; then
  RUNTIME=$SNAP
else
  # add general paths not added by snapcraft due to runtime snap
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH
  export PATH=$PATH:$RUNTIME/usr/bin
  WITH_RUNTIME=yes
fi

# XKB config
export XKB_CONFIG_ROOT=$RUNTIME/usr/share/X11/xkb

# Give XOpenIM a chance to locate locale data.
# This is required for text input to work in SDL2 games.
export XLOCALEDIR=$RUNTIME/usr/share/X11/locale

# Mesa Libs for OpenGL support
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH/mesa
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH/mesa-egl

# Tell libGL where to find the drivers
export LIBGL_DRIVERS_PATH=$RUNTIME/usr/lib/$ARCH/dri
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$LIBGL_DRIVERS_PATH

# Workaround in snapd for proprietary nVidia drivers mounts the drivers in
# /var/lib/snapd/lib/gl that needs to be in LD_LIBRARY_PATH
# Without that OpenGL using apps do not work with the nVidia drivers.
# Ref.: https://bugs.launchpad.net/snappy/+bug/1588192
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/var/lib/snapd/lib/gl

# Mir
if [ -n "$DISPLAY" ]; then
  # Either we are in legacy env (e.g. unity7) or ubuntu-app-launch is launching
  # us intentionally in an XMir environment, in which case we should use it.
  # Specifically unset because some versions of UAL unconditionally set
  # MIR_SOCKET for us, even if launching us under XMir.
  unset MIR_SOCKET
elif [ -S /run/user/$(id -u)/mir_socket ]; then
  export MIR_SOCKET=/run/user/$(id -u)/mir_socket
elif [ -S /run/mir_socket ]; then
  # Fall back to global location if there is no user server (e.g. on a kiosk)
  export MIR_SOCKET=/run/mir_socket
fi
if [ -d $SNAP/mir-libs/$ARCH ]; then
  export MIR_CLIENT_PLATFORM_PATH=$SNAP/mir-libs/$ARCH/mir/client-platform
  # Put mir-libs first because it's easy to end up with a snap-internal copy
  export LD_LIBRARY_PATH=$SNAP/mir-libs/$ARCH:$LD_LIBRARY_PATH
elif [ -d $RUNTIME/usr/lib/$ARCH/mir ]; then
  # As of this writing, ubuntu-app-platform holds a copy of the Mir libraries,
  # but may remove them in favor of mir-libs.  Use them if present.
  # We check both RUNTIME and SNAP (below) because if the SDK does drop the
  # libraries, we want to fall back to an internal copy transparently.
  export MIR_CLIENT_PLATFORM_PATH=$RUNTIME/usr/lib/$ARCH/mir/client-platform
else
  # Fall back to internal copy.
  export MIR_CLIENT_PLATFORM_PATH=$SNAP/usr/lib/$ARCH/mir/client-platform
fi

# Unity7 export (workaround for https://launchpad.net/bugs/1638405)
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH/libunity

# Pulseaudio export
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH/pulseaudio

# Tell GStreamer where to find its plugins
export GST_PLUGIN_PATH=$SNAP/usr/lib/$ARCH/gstreamer-1.0
export GST_PLUGIN_SYSTEM_PATH=$RUNTIME/usr/lib/$ARCH/gstreamer-1.0
# gst plugin scanner doesn't install in the correct path: https://github.com/ubuntu/snapcraft-desktop-helpers/issues/43
export GST_PLUGIN_SCANNER=$RUNTIME/usr/lib/$ARCH/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner

# XDG Config
export XDG_CONFIG_DIRS=$RUNTIME/etc/xdg:$RUNTIME/usr/xdg:$XDG_CONFIG_DIRS
[ "$WITH_RUNTIME" = yes ] && XDG_CONFIG_DIRS=$SNAP/etc/xdg:$SNAP/usr/xdg:$XDG_CONFIG_DIRS # add local SNAP assets if a runtime is used

# Define snaps' own data dir
export XDG_DATA_DIRS=$SNAP_USER_DATA:$RUNTIME/usr/share:$XDG_DATA_DIRS
[ "$WITH_RUNTIME" = yes ] && XDG_DATA_DIRS=$SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS # add local SNAP assets if a runtime is used

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME=$SNAP_USER_DATA/.local/share
export XDG_DATA_DIRS=$XDG_DATA_HOME:$XDG_DATA_DIRS
mkdir -p $XDG_DATA_HOME

# Set cache folder to local path
export XDG_CACHE_HOME=$SNAP_USER_DATA/.cache
mkdir -p $XDG_CACHE_HOME

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1656340 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

# GI repository
export GI_TYPELIB_PATH=$RUNTIME/usr/lib/girepository-1.0:$RUNTIME/usr/lib/$ARCH/girepository-1.0
[ "$WITH_RUNTIME" = yes ] && GI_TYPELIB_PATH=$SNAP/usr/lib/girepository-1.0:$SNAP/usr/lib/$ARCH/girepository-1.0 # add local SNAP assets if a runtime is used

# Font Config and themes
export FONTCONFIG_PATH=$RUNTIME/etc/fonts/conf.d
export FONTCONFIG_FILE=$RUNTIME/etc/fonts/fonts.conf
if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/{fontconfig,fonts,fonts-*,themes,.themes}
  ln -sf $RUNTIME/usr/share/{fontconfig,fonts,fonts-*,themes} $XDG_DATA_HOME
  ln -sfn $RUNTIME/usr/share/themes $SNAP_USER_DATA/.themes
fi

# Build mime.cache
# needed for gtk and qt icon
if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/mime
  if [ `which update-mime-database` ]; then
    cp --preserve=timestamps -dR $RUNTIME/usr/share/mime $XDG_DATA_HOME
    update-mime-database $XDG_DATA_HOME/mime
  fi
fi

# Ensure the app finds locale definitions (requires locales-all to be installed)
export LOCPATH=$LOCPATH:$SNAP/usr/lib/locale

# Gio modules and cache (including gsettings module)
export GIO_MODULE_DIR=$XDG_CACHE_HOME/gio-modules
function compile_giomodules {
  if [ -f $1/glib-2.0/gio-querymodules ]; then
    rm -rf $GIO_MODULE_DIR
    mkdir -p $GIO_MODULE_DIR
    ln -s $1/gio/modules/*.so $GIO_MODULE_DIR
    $1/glib-2.0/gio-querymodules $GIO_MODULE_DIR
  fi
}
if [ $needs_update = true ]; then
  compile_giomodules $RUNTIME/usr/lib/$ARCH
fi

# Keep an array of data dirs, for looping through them
IFS=':' read -r -a data_dirs_array <<< "$XDG_DATA_DIRS"

# Setup compiled gsettings schema
GS_SCHEMA_DIR=$XDG_DATA_HOME/glib-2.0/schemas
function compile_schemas {
  if [ -f "$1" ]; then
    rm -rf $GS_SCHEMA_DIR
    mkdir -p $GS_SCHEMA_DIR
    for d in "${data_dirs_array[@]}"; do
      schema_dir=$d/glib-2.0/schemas
      if [ "$(ls -A $schema_dir/*.xml 2>/dev/null)" ]; then
        ln -s $schema_dir/*.xml $GS_SCHEMA_DIR
      fi
    done
    "$1" $GS_SCHEMA_DIR
  fi
}
if [ $needs_update = true ]; then
  compile_schemas $RUNTIME/usr/lib/$ARCH/glib-2.0/glib-compile-schemas
fi

# Enable gsettings user changes
# symlink the dconf file if home plug is connected for read
DCONF_DEST_USER_DIR=$SNAP_USER_DATA/.config/dconf
if [ ! -f $DCONF_DEST_USER_DIR/user ]; then
  if [ -f /home/$USER/.config/dconf/user ]; then
    mkdir -p $DCONF_DEST_USER_DIR
    ln -s /home/$USER/.config/dconf/user $DCONF_DEST_USER_DIR
  fi
fi

# Testability support
if [ -d "$SNAP/testability/$ARCH" ]; then
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SNAP/testability:$SNAP/testability/$ARCH:$SNAP/testability/$ARCH/mesa
fi
#############################
# QT launcher specific part #
#############################

# select qt version
. $SNAP/flavor-select

# Qt Platform to Mir
export QTCHOOSER_NO_GLOBAL_DIR=1
if [ "$USE_qt5" = true ]; then
  # QT_SELECT not exported by ubuntu app platform runtime
  if [ -z "$QT_SELECT" ]; then
    export QT_SELECT=snappy-qt5
  fi
else
  export QT_SELECT=snappy-qt4
fi

# Removes Qt warning: Could not find a location
# of the system Compose files
export QTCOMPOSE=$RUNTIME/usr/share/X11/locale

# Qt Libs, Modules and helpers
if [ "$USE_qt5" = true ]; then
  export QT_PLUGIN_PATH=$RUNTIME/usr/lib/$ARCH/qt5/plugins
  export QML2_IMPORT_PATH=$RUNTIME/lib/$ARCH:$RUNTIME/usr/lib/$ARCH/qt5/qml:$QML2_IMPORT_PATH
  # Try to use qtubuntu-print plugin, if not found Qt will fallback to the first found (usually cups plugin)
  export QT_PRINTER_MODULE=qtubuntu-print
  [ "$WITH_RUNTIME" = yes ] && QML2_IMPORT_PATH=$SNAP/lib/$ARCH:$SNAP/usr/lib/$ARCH/qt5/qml:$QML2_IMPORT_PATH
  PATH=$RUNTIME/usr/lib/$ARCH/qt5/bin:$PATH
  if [ -z "$DISPLAY" ] || [ -n "$MIR_SOCKET" ]; then
    export QT_QPA_PLATFORM=ubuntumirclient
  else
    # If a X11 $DISPLAY variable is set we should use it
    export QT_QPA_PLATFORM=xcb
    export QT_QPA_PLATFORMTHEME=appmenu-qt5
  fi
else
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SNAP/usr/lib/$ARCH/qt4
  export QT_PLUGIN_PATH=$SNAP/usr/lib/$ARCH/qt4/plugins
  export QML_IMPORT_PATH=$SNAP/usr/lib/$ARCH/qt4/qml:$SNAP/lib/$ARCH:$QML_IMPORT_PATH
  PATH=$SNAP/usr/lib/$ARCH/qt4/bin:$PATH
fi

# Necessary for the SDK to find the translations directory
export APP_DIR=$SNAP

# Use GTK styling for running under Unity 7
export GTK_PATH=$RUNTIME/usr/lib/$ARCH/gtk-2.0

# Gdk-pixbuf loaders
export GDK_PIXBUF_MODULE_FILE=$XDG_CACHE_HOME/gdk-pixbuf-loaders.cache
export GDK_PIXBUF_MODULEDIR=$RUNTIME/usr/lib/$ARCH/gdk-pixbuf-2.0/2.10.0/loaders
if [ $needs_update = true ]; then
  rm -f $GDK_PIXBUF_MODULE_FILE
  if [ -f $RUNTIME/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders ]; then
    $RUNTIME/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders > $GDK_PIXBUF_MODULE_FILE
  fi
fi

# Icon themes cache
if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/icons
  mkdir -p $XDG_DATA_HOME/icons
  for d in "${data_dirs_array[@]}"; do
    for i in $d/icons/*; do
      if [ -d "$i" ]; then
        theme_dir=$XDG_DATA_HOME/icons/$(basename "$i")
        if [ ! -d "$theme_dir" ]; then
          mkdir -p "$theme_dir"
          ln -s $i/* "$theme_dir"
          if [ -f $RUNTIME/usr/sbin/update-icon-caches ]; then
            $RUNTIME/usr/sbin/update-icon-caches "$theme_dir"
          elif [ -f $RUNTIME/usr/sbin/update-icon-cache.gtk2 ]; then
            $RUNTIME/usr/sbin/update-icon-cache.gtk2 "$theme_dir"
          fi
        fi
      fi
    done
  done
fi

###############################################
# AnimationMaker plugins are loaded from here #
###############################################
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SNAP_USER_DATA/plugins/lib
export PATH=$PATH:$SNAP_USER_DATA/plugins/bin

###############################
# Mark update and exec binary #
###############################

[ $needs_update = true ] && echo "SNAP_DESKTOP_LAST_REVISION=$SNAP_REVISION" > ~/.last_revision

exec "$@"
